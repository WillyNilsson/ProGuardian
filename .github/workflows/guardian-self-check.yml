name: Guardian Self-Check

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0' # Weekly on Sunday

jobs:
  guardian-check:
    name: Guardian Standards Self-Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Guardian self-check
        run: |
          echo "🛡️ Running Guardian quality standards check on ProGuardian itself..."

          # Function complexity check
          echo "Checking function complexity..."
          COMPLEX_FUNCTIONS=$(find src -name "*.js" -type f -exec awk '
            /function|=>/ { 
              start = NR 
            }
            /^}/ { 
              if (start && NR - start > 20) {
                print FILENAME ":" start "-" NR " (Function exceeds 20 lines)"
              }
              start = 0
            }
          ' {} \;)

          if [ ! -z "$COMPLEX_FUNCTIONS" ]; then
            echo "❌ Found functions exceeding 20 lines:"
            echo "$COMPLEX_FUNCTIONS"
            EXIT_CODE=1
          else
            echo "✅ All functions under 20 lines"
          fi

          # Nesting depth check
          echo -e "\nChecking nesting depth..."
          DEEP_NESTING=$(find src -name "*.js" -type f -exec awk '
            /{/ { depth++ }
            /}/ { depth-- }
            { if (depth > 3) print FILENAME ":" NR " (Nesting depth: " depth ")" }
          ' {} \;)

          if [ ! -z "$DEEP_NESTING" ]; then
            echo "❌ Found deep nesting (>3 levels):"
            echo "$DEEP_NESTING"
            EXIT_CODE=1
          else
            echo "✅ No deep nesting found"
          fi

          # Error handling check
          echo -e "\nChecking error handling..."
          GENERIC_CATCH=$(grep -n "catch.*{.*console\|catch.*{.*}" src/**/*.js 2>/dev/null | grep -v "specific\|Error\|error")

          if [ ! -z "$GENERIC_CATCH" ]; then
            echo "❌ Found generic error handling:"
            echo "$GENERIC_CATCH"
            EXIT_CODE=1
          else
            echo "✅ Error handling appears specific"
          fi

          # Security patterns check
          echo -e "\nChecking security patterns..."
          SECURITY_ISSUES=$(grep -n "eval(\|Function(\|innerHTML\|document.write" src/**/*.js 2>/dev/null)

          if [ ! -z "$SECURITY_ISSUES" ]; then
            echo "❌ Found potential security issues:"
            echo "$SECURITY_ISSUES"
            EXIT_CODE=1
          else
            echo "✅ No obvious security anti-patterns"
          fi

          # Exit with appropriate code
          exit ${EXIT_CODE:-0}

      - name: Generate Guardian report
        if: always()
        run: |
          cat > guardian-report.md << EOF
          # Guardian Self-Check Report

          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Status:** ${{ job.status }}

          ## Summary
          ProGuardian CLI has been checked against its own Guardian standards.

          ## Areas Checked
          - Function complexity (max 20 lines)
          - Nesting depth (max 3 levels)
          - Error handling specificity
          - Security anti-patterns
          - Code quality standards

          ## Results
          See the workflow logs for detailed findings.

          ---
          *This report was automatically generated by the Guardian self-check workflow.*
          EOF

      - name: Upload Guardian report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: guardian-self-check-report
          path: guardian-report.md
